

MX * Kommentare in routes.rb unnötig, würde ich entfernen MX

MX routes.rb: Routen doppelt definiert, users-Routen aufräumen 
(unbenutzte Routes, zusammenfassen in einem Block, ev. mehr RESTmäßig aufbauen. 

MX * tags_controller: before_filter als protected markieren und unterhalb der Actions platzieren. A
ußerdem definiert der before_filter Actions, die es gar nicht gibt.  MX

MX * bookmarks_controller: Kommentare bei den before_filters eigentlich unnötig, da die Filternamen den Zweck schon gut erklären sollten (ihr habt überhaupt öfter Kommentare wo der Code selbst erklärend genug ist), before_filter protected (siehe oben)

MX * bookmarks_controller: set_tags und parse_tag_string sollten im Model (Bookmark) sein. MX

*Auch die Zuweisung der Listen könnte man vereinfachen und aus dem Controller entfernen 
(für solche Fälle eignet sich oft accepts_nested_attributes_for, 
in diesem Fall sollte aber die direkte Zuweisung ausreichend sein, 
da list_ids= eine automatisch generierte Methode der has_and_belongs_to_many-Beziehung ist!). 

MX * Noch etwas zu set_tags: ihr solltet direkt die AR-Beziehung zum Finden verwenden, dann spart ihr euch das aufwändige Vergleichen, 
ob das auch ein Tag des Users ist (z.B. "current_user.tags.find(...))
->der rest is nötig weil...


MX * bookmarks_controller#edit: das each das euch den Tags-String zusammenbaut, könntet ihr komplett durch die Array-Methode "join" ersetzen: ["a","b"].join(",")  => "a,b" MX

MX * bookmarks_controller: if ! => unless (auch die Klammern lässt man in Ruby meist weg, wenn die Lesbarkeit gegeben ist). MX


MX * bookmarks_controller: is_user_allowed_to bietet einige Vereinfachungsmöglichkeiten. 
Statt bookmarks.index könntet (und solltet) ihr direkt bookmarks.find verwenden, da ansonsten alle Bookmarks in den Speicher geladen werden. 
Ähnliches gilt für das write-Attribut bei den Shares.  -> geht nicht weil das direkt die bookmarks vom user sind
Zuletzt könntet ihr auch die ActiveRecord-Assoziation für shared_bookmarks definieren (z.B. mit selbstgeschriebenem JOIN) 
und hier dann ebenfalls mit einem .find arbeiten 
(also statt das Bookmark zu finden und dann mit einer Liste zu vergleichen würdet ihr das Bookmark direkt über die Assoziation finden). 
Noch etwas: das "allowed = true" würdet ihr nicht brauchen, ihr könntet statt dessen einfach ein "return if" schreiben, dann kommt ihr nicht mehr bis zum redirect.

MX * bookmarks_controller#create: ihr weist alle Attribute manuell zu, anstatt einfach mass_assignment zu verwenden!

MX * Ihr braucht in Ruby nicht "if !foo.nil?" schreiben, "if foo" hat (fast) denselben Effekt.MX

MX * CamelCased AR-Attribute und Methodennamen (Ruby-Konvention hier ist underscored) MX

* User#writeable_lists: ich habe nicht ganz verstanden, wieso die default_list hier herausgenommen wird, ihr solltet das aber DB-seitig machen (z.B. durch die Verwendung eines Scopes) // wieso mit scopes? macht keinen Sinn..


MX * Rubyism: keine Klammern bei einer Methode ohne Argumente, kein Semikolon am Ende einer Zeile! Bspw. im shares_controller habt ihr auch einige Tabs (statt 2 Spaces) als Einrückung.

MX * lists_controller#share: tepmlate statt template, manuelle Sortierung statt in der DB, auch das delete sollte in der DB gemacht werden.

MX * lists_controller#show: es sieht so aus, als würde @tags nicht verwendet, auch diese Operation könnte sonst in der DB stattfinden 
(außerdem ist die Zeile dupliziert).  doch brauch ma

* shares_controller#create könnte stark vereinfacht werden, 
vor allem durch ein Übertragen in das Model und Verwenden der AR-Validierungsmöglichkeiten. 
Eine lokale Variable, die den aktuellen Validierungsstand speichert ist ein guter Indikator dafür, 
dass die Validierung zu komplex aufgebaut ist.

MX * in Partials sollten keine Instanzvariablen verwendet werden (verschlechtert die Übersicht, ähnlich wie bei globalen Variablen)
->done * statt 'render :partial => "form"' könnt ihr einfach 'render "form"' schreiben
->done * unbenutzte Methoden in User!

MX @public_only wird nicht gefunden in bookmarks view
